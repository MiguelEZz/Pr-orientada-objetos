4 PILARES DE LA PROGRAMACION ORIENTADA A OBJETOS

1. ABSTRACCION
llevar un objeto del mundo real al codigo(llevarlo como molde, para crear otros mas)
Para lograr la abstracción, se definen clases que actúan como plantillas para la creación de objetos.
Estas clases describen las propiedades (atributos) y el comportamiento (métodos) del objeto, pero no 
especifican cómo se implementan internamente. Por lo tanto, los usuarios de la clase solo necesitan
conocer la interfaz (métodos públicos) y no los detalles de su implementación.

      para crear los constructores:
        -Funciones constructoras
            function Persona(parametros) {
                  this.atributos = parametros
               }
              Persona.prototype.saludar = function() {
              console.log(`Hola, soy ${this.nombre} y tengo ${this.edad} años.`);   //METODOS
               };
                  //INSTACIAMOS
              const miguel = new Persona();

        -Construcores con sintaxis de clases
            class Student {
             constructor({
              parametros
             }) {
              this.atributos = paremetros
             };
              metodos(){
              }
            }
                  //INSTANCIAMOS
             const miguel = new Persona({})



2.ENCAPSULAMIENTO
en la programacion orientada a objetos encapsulamos atributos para 
  -poder modificarlos solo dentro de esa clase
  -poder usar alguna logica de validacion antes de modificar el valor desde afuera

  en JS tenemos:
    -SETTER Y GETTERS
      -objetos literales
        get prop() {
        //     return this.__prop__;
        //   },     
        //   set prop(value) {                  //sin Object.defineProperty
        //     this.__prop__ = value * 2;
        //   },
        // };
    
        //const obj = {};
        // Object.defineProperty(obj, //objeto target
        // 'prop', //nombre propiedad
        //     {
        //     enumerable: true,
        //     configurable: true,
        //     get prop() { //getter          //con Object.defineProperty
        //         return this.__prop__;      //podemos configurar mas cosas como
        //     },                             //enumerable, configurable, get, set, 
        //     set prop(value) { //setter     //que sirven mucho para el encapsulamiento
        //         this.__prop__ = value * 2;
        //     },
        //     });
        //     obj.prop = 12;  

      -funciones constructoras
          
        // function Persona(nombreInicial) {
        //     // Propiedad privada para almacenar el nombre
        //     let _nombre = nombreInicial;
                  
        //     // Getter para obtener el nombre
        //     Object.defineProperty(this, 'nombre', {
        //          get: function() {
        //         console.log('Obteniendo nombre');
        //         return _nombre;
        //         }
        //     });
                  
        //     // Setter para establecer el nombre
        //     Object.defineProperty(this, 'setNombre', {
        //         set: function(nuevoNombre) {
        //         console.log('Estableciendo nombre a', nuevoNombre);
        //         _nombre = nuevoNombre;
        //         }
        //     });
        //     }         
                //el Object.defineProperty lo metemos dentro de la funcion

      -clases
         class Student {
             constructor({
              parametros
             }) {
              this.atributos = paremetros
              this.#oculto = parametros
             };
              metodos(){
                }
              get oculto(){
              return.this.#oculto;
                }
              set oculto(parametro){
                if(true){
                this.#oculto =parametro;
                }
                }  
            }

        ahora para usar usamos la misma sintaxis de reasignacion:
        // GETTER 
        //  wellcomeCBP.name 
        //     te va a traer el valor que tenga this.#name
        
        // SETTER 
        //  wellcomeCBP.name = "perrin"
        //     va a actualizar el valor de this.#name si 
        //     cumple con la condicion que le pusimos






    -MODULES DE ECMASCRIPT 6

//USANDO ENCAPSULAMIENTO CON MODULES EN JS


si en HTML un archivo fue <script> antes que otro este puede usar
los datos del primero.
pero si queremos controlar y protejer los datos de algun archivo
usamos los modulos.

los modulos son la capacidad de usar datos de un archivo desde/otro

//usamos las palabras clave: 
    //export 
            //para definir cuales van a ser los unicos datos
            //que queremos usar desde otro archivo
    
   //import
            //para importar los export, solo podremos importar
            //las funciones o variables que se hayan expordato

//ESTA ES UNA FORMA DE PROTECCION YA QUE ESTAMOS DEFINIENDO
//CUALES VAN A SER LOS UNICOS DATOS QUE VAN A SALIR DE ESTE ARCHIVO
//YA QUE LOS DEMAS DATOS PROBABLEMENTE SEAN CONFIDENCIALES.

//ejm:

// 1. nombramos a nuestros archivos que modularizaremos
//    con la extencion:   main.mjs

// 2. en el HTML al llamar el archivo js, usamos
//     <script src="main.js" type="module"></script>    
//        type="module"

// 3. exportamos cualquier dato que querramos desprotejer
//     export variableOFunction...

// 4. importamos desde el archivo donde vamos a usar los datos
//    exportados
//        import {nombre} from "./ruta"

//     nombre = nombre de la variable o funcion que hayamos exportado
//     ruta = ruta del archivo donde se hizo el export
    
    //#no es necesario colocar en el HTML el archivo
    //donde se hizo el EXPORT, solo en el que se hace IMPORT
    
//ESTO SE CONSIDERA ENCAPSULAMIENTO, YA QUE ESTAMOS PROTEJIEDO
//LOS DATOS, SOLO DEJANDO SALIR LOS DATOS QUE TENGAN EL EXPORT










3. HERENCIA
      podria definirlo como prototipos de prototipos
      es un protitipo madre que le heredara   sus atributos y metodos a los prototipos hijos
      pero cada atributo hijo podra cambiar ciertas cosas.
      
      ejm uso. 
      PARA STUDENT de platzi, hay 3 planes y cada uno con atributos similares, pero con permisos diferentes
      para evitar hacer una clase completa para cada plan.
      Mejor creamos un constructor madre que va a heredar atributos basicos de un estudiante
      pero cada hijo va a cambiar en algunos otros, como su plan y sus permisos
      

__CONSTRUCTORES CON SINTAXIS DE CLASES

usando la palabra recervada extends:
HIJO extends MAMA    hijo va a heredar todas los atributos y metodos de la mama, pero puede añadir otros

      -CLASE MADRE
            //usaremos student para que sea la clase madre
            // class Student {
            //     constructor({
            //         name,
            //         age,
            //         aproved = [],   //podemos dejar valores defauld
            //         twitter,
            //         email,
            //     }){
            //         this.name = name;
            //         this.age = age;
            //         this.aproved = aproved;
            //         // this.function (nuevoCurso){
            //         //     this.cursosAprovados.push(nuevoCurso)
            //         // }
            //     }
            
            //     aprobarCurso(nuevoCursito){
            //         this.aproved.push(nuevoCursito)
            //     }
            // }

      -CLASES HIJO
            //class freeStudent extends Student{
            //     constructor(props){
            //         super(props)
            //     }
            //     approveCourse(newCourse){
            //         if(newCourse.isFree){
            //         this.approveCourse.push(newCourse)
            //     } else{
            //         console.warn("lo sentimos" + this.name + "no eres prime")
            //     }
            // }
            // }
            
            // class BasicStudent extends Student{
            // }
            
            // class ExpertStudent extends Student{
            // }

            USAMOS EL METODO RECERVADO SUPER()   PARA MANDARLE TODOS LOS ARGUMENTOS QUE SE ASIGNEN AL INSTANCIAR ESTA CLASE
            HACIA EL CONSTRUCTOR DE LA CLASE MADRE, ESTE SE VA A ENCARGAR DE ASIGNAR LOS THIS., LOS METODOS Y  DESPUES LA
            CLASE HIJO VA A HEREDAR TODO LOS ATRIBUTOS Y METODOS QUE CONSTRUYÓ LA CLASE MADRE.






 ___HERENCIA EN FUNCIONES CONSTRUCTORAS

    // Para hacer la herencia usando la sintaxis de prototipos podemos hacer lo 
    // siguiente:   Suponiendo que ya tenemos creada nuestra superclase (Student).
    //  Vamos a crear una clase (FreeStudent) que va a pasar los parámetros de 
    //  inicialización al constructor de la superclase, para esto hacemos uso de
    //  la función call().


        // function FreeStudent(props) {
        //   Student.call(this, props);
        // }

    // Le pasamos como primer atributo el contexto de ejecución de nuestra nueva
    //  "clase" y como segundo parámetro los props, que son estas propiedades que
    //  recibiremos de inicialización.   Después de esto, clonamos el prototipo de
    //  nuestra superclase en el prototipo de nuestra subclase:
    
    
        // FreeStudent.prototype = Object.create(Student.prototype);

    //   Por último, le agregamos cualquier función extra que deseemos
    //  agregar a la subclase:
    
    
        // FreeStudent.prototype.approveCourse = function (newCourse) {
        //   if (newCourse.isFree) {
        //     this.approvedCourses.push(newCourse);
        //   } else {
        //     console.warn(`Lo sentimos, ${this.name}, sólo puedes tomar cursos gratis`);
        //   }
        // }









4.POLIMORFISMO
Es como Heredar mejorado, Ya que ademas de heredar sus atributos metodos
nuestras subclases van a porder cambiar o anular el comportamiento de los metodos
y atributos que heredo de la superClass.

cambiar la forma de estos metodos y atributos que le llegan por la herencia

      TIPOS DE POLIMORFISMO
            -sobrecarga
            -Parametrico
            -inclusion    en js solo podemos usar este
                  permite sobreescribir el metodo o atributo que heredamos
                  pero queremos  cambiar de la clase mama


      EJM:

        //POLIMORFISMO
        //son como herencias mejoradas, 
        //le permitira modificar algunos atributos y argumentos al classhijo

    class Comment {
        constructor({
            content,
            studentName,
            studentRole = "estudiantes"
        }){
            this.content = content;
            this.studentName = studentName;
            this.studentRole = studentRole
            this.likes = 0;
        }
        publicar(){
            console.log(this.studentName + this.studentRole + content)
        }
    }




    //EL POLIMORFIRMO LO VAMOS A USAR CUANDO TRABAJAMOS CON HERENCIAS
    //querramos usar un metodo del classMadre, pero modificarlo un poco

class Student {
    constructor({
        name,
        age,
        aproved = [],   //podemos dejar valores defauld
        twitter,
        email,
    }){
        this.name = name;
        this.age = age;
        this.aproved = aproved;
        // this.function (nuevoCurso){
        //     this.cursosAprovados.push(nuevoCurso)
        // }
    }

    aprobarCurso(nuevoCursito){
        this.aproved.push(nuevoCursito)
    }
    publicarComentario(commentContent){
        const commentario = new Comment({
            content: commentContent,
            studentName:this.name,
        })
        commentario.publicar();
    }
}

//STUDENT sera la funcion madre, tene el metod publicarComentario() para todos los estudiantes
//pero el la subclase TEACHERSTUDENT vamos a modificar un poco este mismo metodo
//agregandole su cargo. "profesor"


class TeacherStudent extends Student{
    constructor(props){
        super(props)
    }
    approveCourse(newCourse){
        this.approveCourse.push(newCourse)
    }
    publicarComentario(commentContent){
       const commentario = new Comment({
           content: commentContent,
           studentName:this.name,
           studentRole: "profesor"
       })
       commentario.publicar();
   }


}







__POLIMORFISMO CON FUNCIONES CONSTRUCTORAS
            
            // LOS METODOS DE LAS FUNCIONES CONSTTUCTORAS SE CREAN AFUERA Y LOS MANDAMOS A LA CLASE CON .PROTOTYPE
            // para usar el polimorfismo solamente se trata de que
            // a la subClase le volveremos a crear la funcion, pero con el mirmo nombre que la original
            // de su clase madre.  No ocurrira ningun error, y podremos reemplazar este metodo
            
            
            
            // poder usar el mismo nombre del metodo es beneficioso, para por ejemplo:
            // si no usamos el polimorfismo y creamos metodos independientes. 
            // -publicarComentarioProfe  -publicarComentarioExpert ....
            
            // para publicar los comentarios, tendriamos que usar una logica para dependiendo de estudiante
            // llamar a algun metodo u otro.
            
            //PERO CON EL POLIMORFISMO LLAMANDO A LA MISMA FUNCION, ya que le cambiamos el contenido, 
            //respondera diferentes cosas segun la subclass, AL FINAL ESTAS RESPUSTAS SE RELACIONAN
            // Y SOLO HARIA FALTA LLAMAR A LA ACCION Y QUE CADA SUBCLASE LO PERSONALIZE
            
            
            
            
            // primero escribiremos la súper clase (Persona)
            // function Person(age,weight){
            //  this.age = age;
            //  this.weight = weight;
            // }
            
            
            
            // Y le daremos a la persona la posibilidad de compartir su información.
            // Person.prototype.getInfo = function(){
            //  return "I am " + this.age + " years old " +
            //     "and weighs " + this.weight +" kilo.";
            // };
            
            
            
            // A continuación deseamos tener una subclase de Persona, Empleado.
            // function Employee(age,weight,salary){
            //  this.age = age;
            //  this.weight = weight;
            //  this.salary = salary;
            // }
            // Employee.prototype = new Person();
            
            
            
            // Y anularemos el comportamiento de getInfo definiendo uno que sea más adecuado para un empleado
            // Employee.prototype.getInfo = function(){
            //  return "I am " + this.age + " years old " +
            //     "and weighs " + this.weight +" kilo " +
            //     "and earns " + this.salary + " dollar.";  
            // };
            
            
            
            
            // Se pueden usar de forma similar a su código original.
            // var person = new Person(50,90);
            // var employee = new Employee(43,80,50000);
            
            // console.log(person.getInfo());
            // console.log(employee.getInfo());






__VEMOS QUE EN ESTA SUBCLASE ESTAMOS REESCRIBIENDO EL MISMO METODO CON EL MISMO NOMBRE
      //publicarComentario(), esto es el polimorfismo
      
      //ya que en el Student no le definiamos el rol del estudiante
      //porque por default es "estudiante"
      
      //pero usando el polimorfismo estamos modificando la misma funcion en la subclase
      //para que ahora defina que el studentRole será "profesor
      
      
      //ESTAS SON LAS FORMAS EN QUE SE PUEDE USAR EL POLIMORFISMO:
      //recordemos que en js solo podemos usar el polimorfismo de inclucion
      
      // Sobrescripción de Métodos (Polimorfismo de Método):
      
      // Las subclases pueden sobrescribir (redefinir) un método de la clase padre, 
      // proporcionando una implementación específica para ese método en la subclase. Esto permite
      //  que el mismo método tenga comportamientos diferentes según el tipo de objeto.
      // Sobrecarga de Métodos:
      
      // En algunos lenguajes de programación, como Java, es posible tener varios métodos con el 
      // mismo nombre en la misma clase, pero con diferentes parámetros (cantidad o tipos). El método
      //  a ejecutar se determina según la cantidad y tipos de argumentos que se le pasan.
      // Polimorfismo de Clases Abstractas e Interfaces:
      
      // Las clases abstractas pueden contener métodos abstractos que las subclases deben implementar,
      //  permitiendo diferentes implementaciones para esos métodos en las subclases. Las interfaces 
      //  también tienen un comportamiento similar.
      // Polimorfismo de Tipo:
      
      // En lenguajes con tipado dinámico (como JavaScript), un objeto puede cambiar de tipo durante 
      // su tiempo de vida. Esto significa que un objeto puede comportarse como diferentes tipos y 
      // tener diferentes comportamientos según su tipo actual.
      // Polimorfismo de Herencia:
      
      // El polimorfismo puede aprovechar la herencia para permitir que una clase base trate a sus
      // subclases de manera uniforme a través de una interfaz común, llamando a los mismos métodos
      //  incluso si tienen diferentes implementaciones en cada subclase.
      // Polimorfismo Paramétrico (o Generics):
      
      // En lenguajes que admiten genéricos (como Java, C#, TypeScript), puedes escribir código que
      //  funciona de manera polimórfica con diferentes tipos de datos. Un mismo algoritmo puede 
      //  trabajar con diferentes tipos de datos utilizando tipos genéricos.
      // Polimorfismo Ad Hoc:
      
      // En algunos lenguajes, puedes definir varias implementaciones para una función o método y
      //  el compilador selecciona la implementación correcta según el tipo de argumentos que se 
      //  pasan (polimorfismo ad hoc)."
